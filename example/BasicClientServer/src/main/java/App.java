import io.reactivex.Observable;
import net.doodream.yarmi.client.RMIClient;
import net.doodream.yarmi.data.RMIServiceInfo;
import net.doodream.yarmi.data.Response;
import net.doodream.yarmi.sdp.ServiceDiscovery;
import net.doodream.yarmi.sdp.ServiceDiscoveryListener;
import net.doodream.yarmi.sdp.ServiceRegistry;
import net.doodream.yarmi.sdp.mdns.MDnsServiceDiscovery;
import net.doodream.yarmi.sdp.mdns.MDnsServiceRegistry;
import net.doodream.yarmi.server.RMIService;

import java.io.IOException;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {
        if (args.length == 0) {

            System.exit(0);
        }

        if (args[0].equalsIgnoreCase("s")) {
            try {
                final RMIService service = RMIService.create(TestService.class);
                service.listen();

                final ServiceRegistry registry = MDnsServiceRegistry.create();
                registry.start();

                int id = registry.register(service);
                System.out.printf("service listen %d\n", id);
                Thread.sleep(10000L);
            } catch (IOException | IllegalAccessException | InstantiationException | InterruptedException e) {
                e.printStackTrace();
            }

        } else if (args[0].equalsIgnoreCase("c")) {
            try {
                final ServiceDiscovery discovery = MDnsServiceDiscovery.create();
                final RMIServiceInfo serviceInfo = Observable.<RMIServiceInfo>create(emitter -> {

                    discovery.start(TestService.class, new ServiceDiscoveryListener() {
                        @Override
                        public void onDiscoveryStarted() {

                        }

                        @Override
                        public void onServiceDiscovered(RMIServiceInfo service) {
                            emitter.onNext(service);
                        }

                        @Override
                        public void onDiscoveryFinished(int i, Throwable throwable) {

                        }
                    });
                }).timeout(10L, TimeUnit.SECONDS).blockingFirst();
                System.out.printf("service discovered : %s\n", serviceInfo.getName());
                TestController client = (TestController) RMIClient.create(serviceInfo, TestService.class, new Class[] {
                        TestController.class
                });
                final String message = "Hello";
                final Response<String> response = client.echo(message);
                if(response.isSuccessful()) {
                    final String echo = response.getBody();
                    if(echo.equals(message)) {
                        System.out.printf(Locale.ENGLISH, "correct response returned : %s\n", echo);
                    } else {
                        System.err.printf("wrong response returned : %s (expected to be %s)\n", echo, message);
                        System.exit(-1);
                    }
                } else {
                    System.out.println("fail to get response");
                    System.exit(-1);
                }
                discovery.stop();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }
}
